###################################################
# Simple program, which xor encrypts input string #
###################################################

# VARIABLES #
# Text #
.string DESCRIPTION '--> Simple program, which xor encrypts input string <--'
.string PROMPT 'Enter text (max size 16): '
.string ENC_RESULT 'Encrypted text: '
.string DEC_RESULT 'Decrypted text: '

# Placeholders #
.dword text_size 0x0
.dword encrypt_byte 0x65
.bytes text 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 # 17 -> zero terminated

# CONST #
.const max_bytes 16
.const SYS_READ_LINE 0
.const SYS_WRITE_LINE 1
#.const SYS_READ_FILE 2
#.const SYS_WRITE_FILE 3
#.const SYS_FILE_SIZE 4
#.const SYS_MEM_SIZE 5

# MAIN #
function main
# Print description
movd r1 DESCRIPTION
call print_text

# Ask for string
call enter_text
# Print encrypted text string
movd r1 ENC_RESULT
call print_text

# Print encrypted string
movd r1 text
rmid r2 text_size
call xor_string
movd r1 text
call print_text

# Print encrypted text string
movd r1 DEC_RESULT
call print_text

# Print decrypted string
movd r1 text
rmid r2 text_size
call xor_string
movd r1 text
call print_text

end_function

# Procedure, which xor encryptes
# R1 String
# R2 Size
proc xor_string
xorr r3 r3
rmid r4 encrypt_byte
@ round
rmbr r5 r1
xorr r5 r4
wmbr r1 r5

cmpr r2 r3
incr r1
incr r3
jb round
end_proc

# Procedure, which prints text
# R1 is text
proc print_text
int SYS_WRITE_LINE
end_proc

# Procedure, which ask for text
proc enter_text
@ ask
movd r1 PROMPT
movd r2 text
int SYS_READ_LINE
call check_key_size
jg ask
# Save text size
movd r6 text_size
wmir r6 r1
end_proc

# Procedure, which checks for key size
proc check_key_size
cmpd r1 max_bytes
end_proc
